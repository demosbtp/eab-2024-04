name: Create a new project via Terraform

on:
  workflow_dispatch:
    inputs:
      REGION:
        description: 'The region where the project should be created'
        required: true
        default: 'us10'
  workflow_call:
    inputs:
      REGION:
        required: true
        type: string
        default: 'us10'

jobs:
  execute_infra_setup:
    name: Project Setup
    runs-on: ubuntu-latest
    env: 
      PATH_TO_TFSCRIPT_SA: 'infra/setup_dev_account'
      PATH_TO_TFSCRIPT_CF: 'infra/setup_cf_spaces'
      MTA_PATH: ''
      CF_ORG_ID: ''
      CF_ORG_NAME: ''
      CF_API_URL: ''
    steps:
    - name: Check out Git repository
      id: checkout_repo
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      id : setup_terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_wrapper: false
        terraform_version: latest
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20    

    - name: Install npm dependencies
      id: install_node_dependencies
      run: |
        cd .github/scripts
        npm ci

    - name: Install Tools
      id: install_tools
      run: |
        npm i @sap/cds
        npm install -g mbt

    - name: Build CAP app
      id: build_cap_app
      run: |
        cd src/
        npm install
        cds add hana --production
        cds add xsuaa --production
        cds build
        mbt build -p cf -t=gen --mtar cap-app.mtar

    - name: Create tfvars file for services
      id: create_service_tfvars
      run: |
        cd .github/scripts
        export PATH_TO_TFSCRIPT=${{ env.PATH_TO_TFSCRIPT_SA }} 
        export MTA_PATH=$(find . -type f -name 'mta.yaml' | sed -e 's,^\./,,')
        npm run build:servicetfvars
  
    - name: Terraform Init for Subaccount
      id: terraform_init_sa
      shell: bash
      run: |
        terraform -chdir=${{ env.PATH_TO_TFSCRIPT_SA }} init -no-color
    
    - name: Terraform Apply Subaccount Setup
      id: terraform_apply_sa
      shell: bash
      # We do not store the Terraform state - in a real setup we would reference a remote backend
      run: |
        export BTP_USERNAME=${{ secrets.BTP_USERNAME }}
        export BTP_PASSWORD=${{ secrets.BTP_PASSWORD }}
        terraform -chdir='${{ env.PATH_TO_TFSCRIPT_SA }}' apply -auto-approve -no-color -var globalaccount='${{ secrets.GLOBALACCOUNT }}' -var region='${{ inputs.REGION }}' -var subaccount_name='EAB 2024 04' -var-file='serviceentitlements.tfvars'
        echo "CF_ORG_ID=$(terraform -chdir='${{ env.PATH_TO_TFSCRIPT_SA }}' output -raw -no-color cf_org_id)" >> "$GITHUB_ENV"
        echo "CF_ORG_NAME=$(terraform -chdir='${{ env.PATH_TO_TFSCRIPT_SA }}' output -raw -no-color cf_org_name)" >> "$GITHUB_ENV"
        echo "CF_API_URL=$(terraform -chdir='${{ env.PATH_TO_TFSCRIPT_SA }}' output -raw -no-color cf_api_endpoint)" >> "$GITHUB_ENV"
    
    - name: Terraform Init for Cloud Foundry Space
      id: terraform_init_cf
      shell: bash
      run: |
        terraform -chdir=${{ env.PATH_TO_TFSCRIPT_CF }} init -no-color

    - name: Terraform Apply Cloud Foundry Space Setup
      id: terraform_setup_cf
      shell: bash
      run: |
        export CF_USER=${{ secrets.BTP_USERNAME }}
        export CF_PASSWORD=${{ secrets.BTP_PASSWORD }}
        export CF_API_URL=${{ env.CF_API_URL }}
        terraform -chdir='${{ env.PATH_TO_TFSCRIPT_CF }}' apply -auto-approve -no-color -var cf_org_id='${{ env.CF_ORG_ID }}' -var cf_space_name='dev'

#    - name: Build MTAR 
#      id: build_mtar
#      run: |
#        mbt build -p cf -s='./src/cap-demo/ -t='./src/cap-demo/' --mtar cap-demo.mtar
#    
    - name: Deploy MTAR
      id: deploy_mtar
      uses: NickChecan/sap-btp-action@v3
      with:
        cf_api: ${{ env.CF_API_URL }}
        cf_username: ${{ secrets.BTP_USERNAME }}
        cf_password: ${{ secrets.BTP_PASSWORD }}
        cf_org: ${{ env.CF_ORG_NAME }}
        cf_space: dev
        command: deploy ./src/gen/cap-app.mtar -f
   
    
         