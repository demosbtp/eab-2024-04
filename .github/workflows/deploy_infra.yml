name: Create a new project via Terraform

on:
  workflow_dispatch:

jobs:
  execute_infra_setup:
    name: Project Setup
    runs-on: ubuntu-latest

    steps:
    - name: Check out Git repository
      id: checkout_repo
      uses: actions/checkout@v4
      
   # - name: Setup Terraform
   #   id : setup_terraform
   #   uses: hashicorp/setup-terraform@v3
   #   with:
   #     terraform_wrapper: false
   #     terraform_version: latest
   # 
   # - name: Setup Node.js
   #   uses: actions/setup-node@v4
   #   with:
   #     node-version: 20    

   # - name: Install npm dependencies
   #   id: install_node_dependencies
   #   run: |
   #     cd .github/scripts
   #     npm ci

   #  - name: "Create tfvars file for services"
   #    id: create_service_tfvars
   #    run: |
   #      cd .github/scripts
   #      export PATH_TO_TFSCRIPT='scripts/setup_dev_account' 
   #      export MTA_PATH=$(find . -type f -name 'mta.yaml' | sed -e 's,^\./,,')
   #      npm run build:servicetfvars
   
    #- name: Show created files
    #  run: |
    #    ls -la scripts/setup_dev_account    
   
   # - name: Terraform Init
   #   id: terraform_init
   #   shell: bash
   #   run: |
   #     terraform -chdir=${{ env.PATH_TO_TFSCRIPT }} init -no-color

   # - name: Terraform Apply 
   #   id: terraform_apply
   #   shell: bash
   #   # We do not store the state - in a real setup we would reference a remote backend to store the state
   #   run: |
   #     export BTP_USERNAME=${{ secrets.BTP_USERNAME }}
   #     export BTP_PASSWORD=${{ secrets.BTP_PASSWORD }}
   #     terraform -chdir=${{ env.PATH_TO_TFSCRIPT }} apply -var globalaccount=${{ secrets.GLOBALACCOUNT }} -var region=${{ env.PARAM_REGION }} -var project_name=${{ env.PARAM_PROJECT_NAME}} -var stage=${{ env.PARAM_STAGE}} -var costcenter=${{ env.PARAM_COST_CENTER}} -var org_name=${{ env.PARAM_ORGANIZATION}} -auto-approve -no-color           

   #   # Integrate with workflow system to inform the requestor about the status of the project creation